import java.util.ArrayList;
import java.util.List;
//////////
public class Matrix {
	
//Initialization of variables
double [][] data;
int rows;
int cols;

//Constructor for the Matrix class
public Matrix(int rows, int cols) {
	data = new double [rows][cols];
	this.rows = rows;
	this.cols = cols;
	
	//generates random number between -1 and 1 to fill the matricies
	for(int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
            data[i][j]=Math.random()*2-1;
        }
    }
}

//adds a set value to every value in the Matrix
public void add(double toAll) {
	for(int i = 0; i < rows; i++) {
		for(int j = 0; j < cols; j++) {
			data[i][j] += toAll;
		}
	}
}

//adds matrix values of corresponding locations
public void add(Matrix m) {
	if(cols!=m.cols || rows!=m.rows) {
        System.out.println("Shape Mismatch");
        return;
    }
	
	for(int i = 0; i < rows; i++) {
		for(int j = 0; j < cols; j++) {
			this.data[i][j] += m.data[i][j];
		}
	}
}

//Subtracts matrix values of corresponding locations
public static Matrix subtract(Matrix a, Matrix b) {
    Matrix temp=new Matrix(a.rows,a.cols);
    for(int i=0;i<a.rows;i++){
        for(int j=0;j<a.cols;j++){
            temp.data[i][j]=a.data[i][j]-b.data[i][j];
        }
    }
    return temp;
}

//"flips" the matrix around, x=y, y=x
public static Matrix transpose(Matrix a) {
    Matrix temp=new Matrix(a.cols,a.rows);
    for(int i=0;i<a.rows;i++){
        for(int j=0;j<a.cols;j++){
            temp.data[j][i]=a.data[i][j];
        }
    }
    return temp;
}
	
//performs dot product multiplication of a matrix. 
public static Matrix multiply(Matrix a, Matrix b) {
	Matrix temp = new Matrix(a.rows, b.cols);
	for(int k = 0; k < temp.rows; k++) {
		for(int i = 0; i < temp.cols; i++) {
			double sum = 0;
			for(int j = 0; j < a.cols; j++) {
				sum+= a.data[k][j] * b.data[j][i];
			}
			temp.data[k][i] = sum;
		}
	}
	return temp;
}

//Multiplies each value in a matrix by a corresponding value of another matrix
public void multiply(Matrix a) {
	for(int i = 0; i < a.rows; i++) {
		for(int j = 0; j < a.cols; j++) {
			this.data[i][j]*=a.data[i][j];
		}
	}
}

//multiplies each value in a matrix by a set constant value
public void multiply(double d) {
	for(int i = 0; i < rows; i++) {
		for(int j = 0; j < cols; j++) {
			this.data[i][j]*= d;
		}
	}
}

//"Squishifies" the matrix values so that they are between 0 and 1
public void sigmoid() {
	for(int i=0; i < rows; i++) {
		for(int j = 0; j < cols; j++) {
			this.data[i][j] = 1/(1+Math.exp(-this.data[i][j]));
		}
	}
}

//tbh i don't understand the use of this one it just said that I need this equation when doing this stuff
//prrobably involves calculus I don't understand
public Matrix dsigmoid() {
	Matrix temp = new Matrix(rows, cols);
	for(int i=0; i < rows; i++) {
		for(int j = 0; j < cols; j++) {
			temp.data[i][j] = this.data[i][j]*(1-this.data[i][j]);
		}
	}
	return temp;
}

//returns a matrix from array values, matrix only has a length of one though
public static Matrix fromArray(double[] a) {
	Matrix temp = new Matrix(a.length, 1);
	for(int i = 0; i < a.length; i++) {
		temp.data[i][0] = a[i];
	}
	return temp;
}

//returns a single array from matrix values
public List<Double> toArray(){
	List<Double> temp = new ArrayList<Double>();
	for(int i = 0; i < rows; i++) {
		for(int j = 0; j < cols; j++) {
			temp.add(data[i][j]);
		}
	}
	return temp;
}

}
